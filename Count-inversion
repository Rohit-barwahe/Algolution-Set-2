#include <iostream>
using namespace std;

int mergeAndCount(int arr[], int left, int right) {
    if (left == right)
        return 0;

    int mid = left + (right - left) / 2;
    
    int inv_count = mergeAndCount(arr, left, mid);
    inv_count += mergeAndCount(arr, mid + 1, right);

    inv_count += merge(arr, left, mid, right);

    return inv_count;
}

int merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int* leftArr = new int[n1];
    int* rightArr = new int[n2];

    for (int i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (int i = 0; i < n2; i++)
        rightArr[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left, inv_count = 0;

    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            inv_count += (n1 - i); 
            j++;
        }
        k++;
    }

    
    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    
    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }

    delete[] leftArr; 
    delete[] rightArr; 

    return inv_count;
}

int countInversions(int arr[], int n) {
    return mergeAndCount(arr, 0, n - 1);
}

int main() {
    int arr[] = {7, 2, 6, 3};
    int n = sizeof(arr) / sizeof(arr[0]); 
    cout << "Number of inversions: " << countInversions(arr, n) << endl;
    return 0;
}
